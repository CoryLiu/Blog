{"meta":{"title":"阿b的Blog","subtitle":"因为夹娃娃很疗愈啊","description":null,"author":"Liu","url":"https://coryliu.github.io/Blog","root":"/Blog/"},"pages":[{"title":"404 Not Found","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"404.html","permalink":"https://coryliu.github.io/Blog/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"about/index.html","permalink":"https://coryliu.github.io/Blog/about/index.html","excerpt":"","text":"关于主题本站主题是：Material X One More Thing懒加载占位图如果喜欢请拿去：图片链接 我的沙雕航拍"},{"title":"我的朋友们","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"friends/index.html","permalink":"https://coryliu.github.io/Blog/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu’s blog头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg网址： https://xaoxuu.com/blog/标签： iOS"},{"title":"","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"projects/index.html","permalink":"https://coryliu.github.io/Blog/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"blog/categories/index.html","permalink":"https://coryliu.github.io/Blog/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-11-28T01:56:07.889Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"blog/tags/index.html","permalink":"https://coryliu.github.io/Blog/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ES6箭头函数","slug":"ES6箭头函数","date":"2019-11-25T13:57:41.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/11/25/ES6箭头函数/","link":"","permalink":"https://coryliu.github.io/Blog/2019/11/25/ES6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/","excerpt":"","text":"箭头函数 基本用法ES6允许使用“箭头”（ =&gt; ）定义函数。 123456var f = v =&gt; v;//等同于var f = function(v) &#123; return v;&#125;; 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数的部分。 1234567891011var f = () =&gt; 5;//等同于var f = function() &#123; return 5;&#125;var sum = (num1, num2) =&gt; num1 + num2;//等同于var sum = function(num1, num2) &#123; return num1 + num2;&#125; 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回。 123var sum = (num1, num2) =&gt; &#123; return num1 + num2;&#125; 箭头函数可以与变量解构结合使用。 123456789const full = (&#123; first, last&#125;) =&gt; first + ' ' + last;// 等同于function full(person) &#123; return person.first + ' ' + person.last;&#125; 箭头函数使得表达更加简洁。 12const isEven = n =&gt; n % 2 === 0;const square = n =&gt; n * n; 箭头函数的一个用处是简化回调函数。 1234567// 正常函数写法[1, 2, 3].map(function(x) &#123; return x * x;&#125;);// 箭头函数写法[1, 2, 3].map(x =&gt; x * x); 另一个例子是 1234567// 正常函数写法var result = values.sort(function(a, b) &#123; return a - b;&#125;);// 箭头函数写法var result = values.sort((a, b) =&gt; a - b); 下面是 rest 参数与箭头函数结合的例子。 123456789const numbers = (...nums) =&gt; nums;numbers(1, 2, 3, 4, 5)// [1,2,3,4,5]const headAndTail = (head, ...tail) =&gt; [head, tail];headAndTail(1, 2, 3, 4, 5)// [1,[2,3,4,5]] 使用注意点箭头函数的几个使用注意点： 函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。 不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。 不可以使用 argument 对象，该对象在函数体内不存在。如果要用，可以用rest参数代替。 不可以使用 yield 命令，因为箭头函数不能用作 Generator 函数。 this 对象的指向是可变的，但是在箭头函数中，它是固定的。 1234567891011function foo() &#123; setTimeout(() =&gt; &#123; console.log('id', this.id); &#125;, 100);&#125;var id = 23;foo.call(&#123; id: 42&#125;); 上面代码中， setTimeout 的参数是一个箭头函数，这个箭头函数的定义生效是在 foo 函数生成时，而它的真正执行要等到100毫秒之后。如果是普通函数，执行时 this 应该指向全局对象 window ，这时应该输出 21 。但是，箭头函数导致 this 总是指向函数定义生效时所在的对象，所以输出的是 42 。 箭头函数可以让 setTimeout 里面的 this ，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。 1234567891011121314function Timer() &#123; this.s1 = 0; this.s2 = 0; //箭头函数 setInterval(() =&gt; this.s1++, 1000); //普通函数 setInterval(function() &#123; this.s2++; &#125;, 1000);&#125;var timer = new Timer()setTimeout(() =&gt; console.log('s1: ', timer.s1), 3100);setTimeout(() =&gt; console.log('s2: ', timer.s2), 3100); 上面的代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100毫秒之后，timer.s1被更新了3次，而timer.s2一次也没有更新。","categories":[{"name":"Coding","slug":"Coding","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/"},{"name":"javascript","slug":"Coding/javascript","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/javascript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://coryliu.github.io/Blog/blog/tags/ES6/"},{"name":"箭头函数","slug":"箭头函数","permalink":"https://coryliu.github.io/Blog/blog/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"}]},{"title":"vue生命周期","slug":"vue生命周期","date":"2019-11-21T14:18:40.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/11/21/vue生命周期/","link":"","permalink":"https://coryliu.github.io/Blog/2019/11/21/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"","text":"","categories":[{"name":"Coding","slug":"Coding","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/"},{"name":"Vue.js","slug":"Coding/Vue-js","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/Vue-js/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://coryliu.github.io/Blog/blog/tags/Vue/"}]},{"title":"uni-app导航栏开发指南","slug":"uni-app导航栏开发指南","date":"2019-11-20T13:57:27.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/11/20/uni-app导航栏开发指南/","link":"","permalink":"https://coryliu.github.io/Blog/2019/11/20/uni-app%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","excerpt":"","text":"将官方社区的文章照搬过来，一方面正好在熟悉这块内容，另一方面熟练自己的md语法。原文链接https://ask.dcloud.net.cn/article/34921 uni-app 自带原生导航栏，在pages.json里配置。原生导航的体验更好，渲染新页面时，原生导航栏的渲染无需等待新页面dom加载，可以在新页面进入动画开始时就渲染。 原生导航还可以避免滚动条通顶，并方便的控制原生下拉刷新。通过pages.json的配置，可以简单的、跨端的、高性能的开发业务。 但原生导航栏的扩展能力有限。尤其是微信下，没有提供太多导航栏的配置。在App下，pages.json里每个页面的app-plus下可以设置titleNView等更多参数，可以得到比微信小程序更丰富的扩展性。另外，开发者也可以在必要时取消原生导航栏，使用view自行绘制导航栏。 原生导航栏的通用配置原生导航栏的配置，均在pages.json里，每个page下面的style配置中的navigationBar各个参数配置，即为通用配置，小程序、app、h5均生效。参考https://uniapp.dcloud.io/collocation/pages?id=style 全局取消原生导航栏在pages.json的globalStyle里，有个navigationStyle设置，默认是default，即带有原生导航栏。也可以设置为custom。在设为custom后，所有页面都没有原生导航。但在微信小程序里，右上角始终都有一个胶囊按钮。很多微信小游戏界面也没原生导航栏，但有胶囊按钮。一般App里不会使用这个参数配置。建议个别页面单独设置不使用原生导航，具体如下。 单独去除原生导航栏自微信客户端7.0.0起，App端HBuilderX2.0.3起，支持通过如下方法取消单独一个页面的原生导航。但小程序右上角胶囊按钮仍然去不掉。页面配置 navigationStyle 为 custom: 123456&#123; &quot;path&quot; : &quot;pages/log.log&quot;, &quot;style&quot; : &#123; &quot;navigationStyle&quot;:&quot;custom&quot; &#125;&#125;","categories":[{"name":"Coding","slug":"Coding","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/"},{"name":"uni-app","slug":"Coding/uni-app","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/uni-app/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"https://coryliu.github.io/Blog/blog/tags/uni-app/"}]},{"title":"hexo写作命令","slug":"hexo写作命令","date":"2019-11-20T12:43:01.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/11/20/hexo写作命令/","link":"","permalink":"https://coryliu.github.io/Blog/2019/11/20/hexo%E5%86%99%E4%BD%9C%E5%91%BD%E4%BB%A4/","excerpt":"","text":"新建文章1$ hexo new [layout] &lt;title&gt; layout : 默认为post，可以修改_config.yml中的default_layout参数来指定默认布局 布局（Layout）Hexo 有三种默认布局：post、page 和 draft。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将存储到 source/_posts 文件夹中。 布局 路径 post source/_posts page source draft source/_drafts 如果不希望文章被处理，可以将 Front-Matter 中的 layout: 设为 false。 预览1$ hexo server","categories":[{"name":"关于博客","slug":"关于博客","permalink":"https://coryliu.github.io/Blog/blog/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"},{"name":"hexo命令","slug":"关于博客/hexo命令","permalink":"https://coryliu.github.io/Blog/blog/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/hexo%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://coryliu.github.io/Blog/blog/tags/hexo/"}]},{"title":"Nginx+uwsgi+CentOS7部署Django","slug":"Nginx-uwsgi-CentOS7部署Django","date":"2019-10-24T15:40:16.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/10/24/Nginx-uwsgi-CentOS7部署Django/","link":"","permalink":"https://coryliu.github.io/Blog/2019/10/24/Nginx-uwsgi-CentOS7%E9%83%A8%E7%BD%B2Django/","excerpt":"","text":"","categories":[{"name":"Coding","slug":"Coding","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/"},{"name":"Django","slug":"Coding/Django","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/Django/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://coryliu.github.io/Blog/blog/tags/Django/"}]},{"title":"CAGED系统","slug":"CAGED系统","date":"2019-10-24T15:38:43.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/10/24/CAGED系统/","link":"","permalink":"https://coryliu.github.io/Blog/2019/10/24/CAGED%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"","categories":[{"name":"Guitar","slug":"Guitar","permalink":"https://coryliu.github.io/Blog/blog/categories/Guitar/"},{"name":"乐理","slug":"Guitar/乐理","permalink":"https://coryliu.github.io/Blog/blog/categories/Guitar/%E4%B9%90%E7%90%86/"}],"tags":[{"name":"乐理","slug":"乐理","permalink":"https://coryliu.github.io/Blog/blog/tags/%E4%B9%90%E7%90%86/"}]},{"title":"七和弦","slug":"七和弦","date":"2019-10-24T15:35:38.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/10/24/七和弦/","link":"","permalink":"https://coryliu.github.io/Blog/2019/10/24/%E4%B8%83%E5%92%8C%E5%BC%A6/","excerpt":"","text":"七和弦的分类1. 由4个音按照三度叠加构成，根音与最高音之间成七度音程 2. 七和弦的分类：在C大调顺阶和弦中，所有的三和弦都可以变化成七和弦 常用七和弦的组成音 Maj7：1-3-5-7 (大七和弦) Dom7：1-3-5-b7 (属七和弦) min7：1-b3-5-b7 (小七和弦) 几乎所有七和弦指法(不要背，需学会自己根据音程推导)Seventh（属7） Diminished Seventh（减7） Seventh, Suspended Fourth（7挂4） Major Seventh（大7） Minor Seventh（小7） Minor，Major Seventh（小大7） Major Seventh，Flat Fifth（大7降5） Minor Seeventh，Flat Fifth（小7降5）","categories":[{"name":"Guitar","slug":"Guitar","permalink":"https://coryliu.github.io/Blog/blog/categories/Guitar/"},{"name":"乐理","slug":"Guitar/乐理","permalink":"https://coryliu.github.io/Blog/blog/categories/Guitar/%E4%B9%90%E7%90%86/"}],"tags":[{"name":"乐理","slug":"乐理","permalink":"https://coryliu.github.io/Blog/blog/tags/%E4%B9%90%E7%90%86/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-10-20T15:35:38.000Z","updated":"2019-11-28T01:56:07.889Z","comments":true,"path":"2019/10/20/hello-world/","link":"","permalink":"https://coryliu.github.io/Blog/2019/10/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Coding","slug":"Coding","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/"},{"name":"Hexo","slug":"Coding/Hexo","permalink":"https://coryliu.github.io/Blog/blog/categories/Coding/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://coryliu.github.io/Blog/blog/tags/Hexo/"}]}]}